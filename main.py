import tkinter as tk
from tkinter import ttk, messagebox
import threading
import os
import sys
from PIL import Image, ImageTk
import customtkinter as ctk
import webbrowser
from datetime import datetime, timedelta
try:
    from auto_455 import main as auto_main
except ImportError:
    def auto_main():
        # Fun√ß√£o placeholder para caso o m√≥dulo n√£o esteja dispon√≠vel durante testes
        import time
        print("Simulando automa√ß√£o...")
        time.sleep(5)
        return True

class ModernTooltip:
    """Classe para criar tooltips elegantes para elementos da interface"""
    
    def __init__(self, widget, text):
        self.widget = widget
        self.text = text
        self.tooltip = None
        self.widget.bind("<Enter>", self.show_tooltip)
        self.widget.bind("<Leave>", self.hide_tooltip)
    
    def show_tooltip(self, event=None):
        x, y, _, _ = self.widget.bbox("insert")
        x += self.widget.winfo_rootx() + 25
        y += self.widget.winfo_rooty() + 25
        
        self.tooltip = ctk.CTkToplevel(self.widget)
        self.tooltip.wm_overrideredirect(True)
        self.tooltip.wm_geometry(f"+{x}+{y}")
        
        label = ctk.CTkLabel(
            self.tooltip, 
            text=self.text,
            fg_color="#303030",
            corner_radius=6,
            padx=10,
            pady=6
        )
        label.pack()
    
    def hide_tooltip(self, event=None):
        if self.tooltip:
            self.tooltip.destroy()
            self.tooltip = None

class LogDisplay(ctk.CTkScrollableFrame):
    """Widget para exibir logs da automa√ß√£o"""
    
    def __init__(self, master, **kwargs):
        super().__init__(master, **kwargs)
        self.logs = []
        self.max_logs = 100
        
    def add_log(self, message, log_type="info"):
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        # Definir cores com base no tipo de log
        colors = {
            "info": "#4CAF50",
            "warning": "#FF9800",
            "error": "#F44336",
            "success": "#2196F3"
        }
        color = colors.get(log_type, "#FFFFFF")
        
        # Criar frame para cada entrada de log
        log_frame = ctk.CTkFrame(self, fg_color="transparent")
        log_frame.pack(fill="x", padx=5, pady=2)
        
        # Adicionar timestamp
        time_label = ctk.CTkLabel(
            log_frame, 
            text=timestamp,
            width=60,
            font=("Roboto", 10),
            text_color="#888888"
        )
        time_label.pack(side="left", padx=(0, 10))
        
        # Adicionar mensagem com cor apropriada
        msg_label = ctk.CTkLabel(
            log_frame, 
            text=message,
            font=("Roboto", 11),
            text_color=color,
            anchor="w"
        )
        msg_label.pack(side="left", fill="x", expand=True)
        
        # Manter o n√∫mero de logs limitado
        self.logs.append(log_frame)
        if len(self.logs) > self.max_logs:
            old_log = self.logs.pop(0)
            old_log.destroy()
        
        # Rolar para o √∫ltimo log
        self.after(100, lambda: self._parent_canvas.yview_moveto(1.0))


class AutomacaoApp:
    def __init__(self, root):
        # Configura√ß√£o do CustomTkinter
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("blue")
        
        self.root = root
        self.root.title("Automa√ß√£o SSW")
        self.root.geometry("700x500")
        self.root.minsize(600, 450)
        
        # Vari√°veis de controle
        self.running = False
        self.thread = None
        self.auto_count = 0
        self.start_time = None
        
        # Criar interface principal
        self.create_interface()
        
        # Protocolo de fechamento da janela
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        
        # Iniciar a atualiza√ß√£o do cron√¥metro
        self.update_runtime()
        
        # Iniciar com um log de boas-vindas
        self.log_display.add_log("Sistema de automa√ß√£o inicializado com sucesso", "success")
        self.log_display.add_log("Aguardando comando para iniciar...", "info")

    def create_interface(self):
        # Container principal
        main_container = ctk.CTkFrame(self.root)
        main_container.pack(fill="both", expand=True, padx=15, pady=15)
        
        # Painel superior - Informa√ß√µes de status
        self.status_panel = ctk.CTkFrame(main_container)
        self.status_panel.pack(fill="x", padx=10, pady=10)
        
        # T√≠tulo do aplicativo
        title_label = ctk.CTkLabel(
            self.status_panel, 
            text="AUTOMA√á√ÉO SSW",
            font=ctk.CTkFont(family="Roboto", size=20, weight="bold")
        )
        title_label.pack(pady=(10, 20))
        
        # Grid de estat√≠sticas
        stats_frame = ctk.CTkFrame(self.status_panel, fg_color="transparent")
        stats_frame.pack(fill="x", padx=20, pady=5)
        stats_frame.grid_columnconfigure((0, 1, 2), weight=1)
        
        # Estat√≠stica 1: Status
        status_frame = ctk.CTkFrame(stats_frame, fg_color="#2a2d2e", corner_radius=10)
        status_frame.grid(row=0, column=0, padx=10, pady=10, sticky="ew")
        
        ctk.CTkLabel(
            status_frame, 
            text="STATUS",
            font=ctk.CTkFont(family="Roboto", size=12)
        ).pack(pady=(10, 0))
        
        self.status_label = ctk.CTkLabel(
            status_frame, 
            text="PARADO",
            font=ctk.CTkFont(family="Roboto", size=16, weight="bold"),
            text_color="#FF5252"
        )
        self.status_label.pack(pady=(0, 10))
        
        # Estat√≠stica 2: Tempo de Execu√ß√£o
        time_frame = ctk.CTkFrame(stats_frame, fg_color="#2a2d2e", corner_radius=10)
        time_frame.grid(row=0, column=1, padx=10, pady=10, sticky="ew")
        
        ctk.CTkLabel(
            time_frame, 
            text="TEMPO DE EXECU√á√ÉO",
            font=ctk.CTkFont(family="Roboto", size=12)
        ).pack(pady=(10, 0))
        
        self.time_label = ctk.CTkLabel(
            time_frame, 
            text="00:00:00",
            font=ctk.CTkFont(family="Roboto", size=16, weight="bold")
        )
        self.time_label.pack(pady=(0, 10))
        
        # Estat√≠stica 3: Execu√ß√µes
        count_frame = ctk.CTkFrame(stats_frame, fg_color="#2a2d2e", corner_radius=10)
        count_frame.grid(row=0, column=2, padx=10, pady=10, sticky="ew")
        
        ctk.CTkLabel(
            count_frame, 
            text="EXECU√á√ïES",
            font=ctk.CTkFont(family="Roboto", size=12)
        ).pack(pady=(10, 0))
        
        self.count_label = ctk.CTkLabel(
            count_frame, 
            text="0",
            font=ctk.CTkFont(family="Roboto", size=16, weight="bold")
        )
        self.count_label.pack(pady=(0, 10))
        
        # Painel de bot√µes de controle
        control_panel = ctk.CTkFrame(main_container)
        control_panel.pack(fill="x", padx=10, pady=(5, 10))
        
        # Bot√£o iniciar/parar grande
        self.toggle_button = ctk.CTkButton(
            control_panel,
            text="INICIAR AUTOMA√á√ÉO",
            command=self.toggle_automation,
            height=40,
            fg_color="#4CAF50",
            hover_color="#388E3C",
            font=ctk.CTkFont(family="Roboto", size=14, weight="bold")
        )
        self.toggle_button.pack(side="left", padx=10, pady=10, fill="x", expand=True)
        
        # Bot√£o de configura√ß√µes
        self.settings_button = ctk.CTkButton(
            control_panel,
            text="",
            width=40,
            height=40,
            fg_color="#555555",
            hover_color="#666666",
            command=self.show_settings
        )
        self.settings_button.pack(side="right", padx=(5, 10), pady=10)
        ModernTooltip(self.settings_button, "Configura√ß√µes")
        
        # Bot√£o de ajuda
        self.help_button = ctk.CTkButton(
            control_panel,
            text="",
            width=40,
            height=40,
            fg_color="#555555",
            hover_color="#666666",
            command=self.show_help
        )
        self.help_button.pack(side="right", padx=(5, 0), pady=10)
        ModernTooltip(self.help_button, "Ajuda")
        
        # Bot√£o de agendamento
        self.schedule_button = ctk.CTkButton(
            control_panel,
            text="üïí",
            width=40,
            height=40,
            fg_color="#555555",
            hover_color="#666666",
            command=self.show_schedule
        )
        self.schedule_button.pack(side="right", padx=(5, 0), pady=10)
        ModernTooltip(self.schedule_button, "Agendar In√≠cio")
        
        # √Årea de log
        log_container = ctk.CTkFrame(main_container)
        log_container.pack(fill="both", expand=True, padx=10, pady=10)
        
        log_header = ctk.CTkFrame(log_container, fg_color="transparent")
        log_header.pack(fill="x", padx=10, pady=(5, 0))
        
        ctk.CTkLabel(
            log_header, 
            text="LOG DE ATIVIDADES",
            font=ctk.CTkFont(family="Roboto", size=12, weight="bold")
        ).pack(side="left")
        
        clear_log_btn = ctk.CTkButton(
            log_header,
            text="Limpar",
            font=ctk.CTkFont(size=11),
            width=60,
            height=25,
            command=self.clear_logs
        )
        clear_log_btn.pack(side="right")
        
        # Widget de logs
        self.log_display = LogDisplay(
            log_container,
            width=300,
            corner_radius=10,
            fg_color="#1a1a1a",
            border_width=1,
            border_color="#333333"
        )
        self.log_display.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Rodap√©
        footer = ctk.CTkFrame(main_container, fg_color="transparent")
        footer.pack(fill="x", padx=10, pady=(0, 5))
        
        version_label = ctk.CTkLabel(
            footer, 
            text="v1.2.0",
            font=("Roboto", 10),
            text_color="#888888"
        )
        version_label.pack(side="right")
        
        # Substituir os textos por √≠cones (simulando utiliza√ß√£o de √≠cones)
        # Em um cen√°rio real, voc√™ usaria imagens reais para os √≠cones
        self.settings_button.configure(text="‚öôÔ∏è")
        self.help_button.configure(text="‚ùì")

    def toggle_automation(self):
        if not self.running:
            # Iniciar automa√ß√£o
            self.running = True
            self.start_time = datetime.now()
            self.toggle_button.configure(
                text="PARAR AUTOMA√á√ÉO", 
                fg_color="#F44336",
                hover_color="#D32F2F"
            )
            self.status_label.configure(text="EM EXECU√á√ÉO", text_color="#4CAF50")
            
            # Log
            self.log_display.add_log("Automa√ß√£o iniciada", "success")
            
            # Iniciar thread da automa√ß√£o
            self.thread = threading.Thread(target=self.run_automation)
            self.thread.daemon = True
            self.thread.start()
        else:
            # Parar automa√ß√£o
            self.running = False
            self.toggle_button.configure(
                text="INICIAR AUTOMA√á√ÉO", 
                fg_color="#4CAF50",
                hover_color="#388E3C"
            )
            self.status_label.configure(text="PARADO", text_color="#FF5252")
            
            # Log
            self.log_display.add_log("Automa√ß√£o interrompida pelo usu√°rio", "warning")
            
            if self.thread:
                self.thread.join(timeout=1)

    def run_automation(self):
        """Executa a automa√ß√£o uma √∫nica vez"""
        try:
            # Executar a automa√ß√£o
            self.log_display.add_log("Iniciando automa√ß√£o...", "info")
            
            # Chamar a fun√ß√£o de automa√ß√£o
            result = auto_main()
            
            # Incrementar contador
            self.auto_count += 1
            self.root.after(0, lambda: self.count_label.configure(text=str(self.auto_count)))
            
            # Log de sucesso
            self.log_display.add_log("Automa√ß√£o completada com sucesso", "success")
            
            # Atualizar interface ap√≥s conclus√£o
            self.running = False
            self.root.after(0, lambda: self.toggle_button.configure(
                text="INICIAR AUTOMA√á√ÉO", 
                fg_color="#4CAF50",
                hover_color="#388E3C"
            ))
            self.root.after(0, lambda: self.status_label.configure(
                text="PARADO", 
                text_color="#FF5252"
            ))
            
        except Exception as e:
            error_msg = f"Erro na automa√ß√£o: {str(e)}"
            self.log_display.add_log(error_msg, "error")
            self.running = False
            self.root.after(0, self.update_ui_after_error)

    def update_ui_after_error(self):
        """Atualiza a UI ap√≥s um erro na automa√ß√£o"""
        self.toggle_button.configure(
            text="INICIAR AUTOMA√á√ÉO", 
            fg_color="#4CAF50",
            hover_color="#388E3C"
        )
        self.status_label.configure(text="ERRO", text_color="#F44336")
        self.running = False
        
        # Exibir popup de erro
        messagebox.showerror(
            "Erro de Automa√ß√£o",
            "Ocorreu um erro durante a execu√ß√£o da automa√ß√£o.\nConsulte o log para mais detalhes."
        )

    def update_runtime(self):
        """Atualiza o tempo de execu√ß√£o exibido"""
        if self.running and self.start_time:
            # Calcular tempo decorrido
            elapsed = datetime.now() - self.start_time
            # Formatar como HH:MM:SS
            hours, remainder = divmod(elapsed.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            time_str = f"{hours:02d}:{minutes:02d}:{seconds:02d}"
            self.time_label.configure(text=time_str)
        
        # Agendar pr√≥xima atualiza√ß√£o
        self.root.after(1000, self.update_runtime)

    def clear_logs(self):
        """Limpa os logs exibidos"""
        for log in self.log_display.logs:
            if log.winfo_exists():
                log.destroy()
        self.log_display.logs = []
        self.log_display.add_log("Log limpo pelo usu√°rio", "info")

    def show_settings(self):
        """Exibe janela de configura√ß√µes"""
        settings_window = ctk.CTkToplevel(self.root)
        settings_window.title("Configura√ß√µes")
        settings_window.geometry("400x300")
        settings_window.resizable(False, False)
        settings_window.grab_set()  # Modal
        
        # Adicionar conte√∫do √†s configura√ß√µes
        frame = ctk.CTkFrame(settings_window)
        frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        ctk.CTkLabel(
            frame, 
            text="Configura√ß√µes",
            font=ctk.CTkFont(size=16, weight="bold")
        ).pack(pady=(0, 20))
        
        # Tema
        theme_frame = ctk.CTkFrame(frame)
        theme_frame.pack(fill="x", pady=10)
        
        ctk.CTkLabel(
            theme_frame,
            text="Tema:",
            anchor="w"
        ).pack(side="left", padx=10)
        
        theme_var = ctk.StringVar(value="dark")
        theme_cb = ctk.CTkComboBox(
            theme_frame,
            values=["dark", "light", "system"],
            variable=theme_var,
            command=lambda choice: ctk.set_appearance_mode(choice)
        )
        theme_cb.pack(side="right", padx=10)
        
        # Outros controles de configura√ß√£o podem ser adicionados aqui
        
        # Bot√£o de fechar
        ctk.CTkButton(
            frame,
            text="Salvar e Fechar",
            command=settings_window.destroy
        ).pack(side="bottom", pady=20)

    def show_help(self):
        """Exibe janela de ajuda"""
        help_window = ctk.CTkToplevel(self.root)
        help_window.title("Ajuda")
        help_window.geometry("500x400")
        help_window.grab_set()  # Modal
        
        # Adicionar conte√∫do de ajuda
        frame = ctk.CTkScrollableFrame(help_window)
        frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        ctk.CTkLabel(
            frame, 
            text="Ajuda - Automa√ß√£o SSW",
            font=ctk.CTkFont(size=18, weight="bold")
        ).pack(pady=(0, 20))
        
        # Conte√∫do da ajuda
        help_topics = [
            {
                "title": "Iniciando uma automa√ß√£o",
                "content": "Para iniciar a automa√ß√£o, clique no bot√£o verde 'INICIAR AUTOMA√á√ÉO'. A automa√ß√£o ser√° executada em segundo plano e voc√™ poder√° acompanhar o progresso atrav√©s do painel de logs."
            },
            {
                "title": "Parando uma automa√ß√£o",
                "content": "Para interromper uma automa√ß√£o em andamento, clique no bot√£o vermelho 'PARAR AUTOMA√á√ÉO'. O sistema encerrar√° o ciclo atual e interromper√° o processo."
            },
            {
                "title": "Entendendo os logs",
                "content": "O painel de logs exibe informa√ß√µes sobre a execu√ß√£o da automa√ß√£o. Diferentes cores indicam diferentes tipos de mensagens: verde para sucesso, vermelho para erros, laranja para avisos e azul para informa√ß√µes gerais."
            },
            {
                "title": "Configura√ß√µes",
                "content": "No menu de configura√ß√µes voc√™ pode ajustar o tema da interface e outras prefer√™ncias do sistema de automa√ß√£o."
            },
            {
                "title": "Suporte",
                "content": "Em caso de problemas ou d√∫vidas, entre em contato com o suporte t√©cnico pelo email suporte@sswautomacao.com.br"
            }
        ]
        
        for i, topic in enumerate(help_topics):
            topic_frame = ctk.CTkFrame(frame)
            topic_frame.pack(fill="x", pady=10)
            
            ctk.CTkLabel(
                topic_frame,
                text=topic["title"],
                font=ctk.CTkFont(size=14, weight="bold"),
                anchor="w"
            ).pack(fill="x", padx=10, pady=(10, 5))
            
            ctk.CTkLabel(
                topic_frame,
                text=topic["content"],
                anchor="w",
                justify="left",
                wraplength=440
            ).pack(fill="x", padx=15, pady=(0, 10))
        
        # Bot√£o de fechar
        ctk.CTkButton(
            help_window,
            text="Fechar",
            command=help_window.destroy
        ).pack(side="bottom", pady=10)

    def show_schedule(self):
        """Exibe janela de agendamento"""
        schedule_window = ctk.CTkToplevel(self.root)
        schedule_window.title("Agendar In√≠cio")
        schedule_window.geometry("300x200")
        schedule_window.resizable(False, False)
        schedule_window.grab_set()  # Modal

        frame = ctk.CTkFrame(schedule_window)
        frame.pack(fill="both", expand=True, padx=20, pady=20)

        ctk.CTkLabel(
            frame, 
            text="Agendar In√≠cio da Automa√ß√£o",
            font=ctk.CTkFont(size=14, weight="bold")
        ).pack(pady=(0, 20))

        # Frame para hora e minuto
        time_frame = ctk.CTkFrame(frame, fg_color="transparent")
        time_frame.pack(fill="x", pady=10)

        # Spinbox para hora
        hour_var = tk.StringVar(value="00")
        hour_spinbox = ctk.CTkEntry(
            time_frame,
            textvariable=hour_var,
            width=50,
            justify="center"
        )
        hour_spinbox.pack(side="left", padx=5)

        ctk.CTkLabel(time_frame, text=":").pack(side="left")

        # Spinbox para minuto
        minute_var = tk.StringVar(value="00")
        minute_spinbox = ctk.CTkEntry(
            time_frame,
            textvariable=minute_var,
            width=50,
            justify="center"
        )
        minute_spinbox.pack(side="left", padx=5)

        def schedule_start():
            try:
                hour = int(hour_var.get())
                minute = int(minute_var.get())
                
                if hour < 0 or hour > 23 or minute < 0 or minute > 59:
                    raise ValueError("Hor√°rio inv√°lido")

                now = datetime.now()
                schedule_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
                
                # Se o hor√°rio j√° passou hoje, agenda para amanh√£
                if schedule_time <= now:
                    schedule_time += timedelta(days=1)

                delay_seconds = (schedule_time - now).total_seconds()
                
                self.log_display.add_log(
                    f"Automa√ß√£o agendada para {schedule_time.strftime('%H:%M')}",
                    "info"
                )
                
                # Agenda o in√≠cio da automa√ß√£o
                self.root.after(int(delay_seconds * 1000), self.toggle_automation)
                schedule_window.destroy()
                
            except ValueError as e:
                messagebox.showerror(
                    "Erro",
                    "Por favor, insira um hor√°rio v√°lido (HH:MM)"
                )

        # Bot√£o de agendar
        ctk.CTkButton(
            frame,
            text="Agendar",
            command=schedule_start
        ).pack(side="bottom", pady=20)

    def on_closing(self):
        """Manipula o evento de fechamento da janela"""
        if self.running:
            # Perguntar se deseja realmente fechar
            if messagebox.askyesno("Confirma√ß√£o", "A automa√ß√£o est√° em execu√ß√£o. Deseja realmente sair?"):
                self.running = False
                if self.thread:
                    self.thread.join(timeout=1)
                self.root.destroy()
                sys.exit(0)
        else:
            self.root.destroy()
            sys.exit(0)

if __name__ == "__main__":
    # Verificar se o m√≥dulo customtkinter est√° instalado
    try:
        import customtkinter
    except ImportError:
        root = tk.Tk()
        root.withdraw()
        if messagebox.askyesno(
            "Depend√™ncia n√£o encontrada", 
            "Esta aplica√ß√£o requer o m√≥dulo 'customtkinter' para uma interface moderna.\n\n"
            "Deseja instalar agora? (Requer conex√£o com internet)"
        ):
            import subprocess
            try:
                subprocess.check_call([sys.executable, "-m", "pip", "install", "customtkinter", "pillow"])
                messagebox.showinfo(
                    "Instala√ß√£o conclu√≠da", 
                    "Instala√ß√£o conclu√≠da com sucesso. O aplicativo ser√° iniciado."
                )
                # Reiniciar o aplicativo
                os.execv(sys.executable, ['python'] + sys.argv)
            except Exception as e:
                messagebox.showerror(
                    "Erro na instala√ß√£o", 
                    f"Ocorreu um erro ao instalar as depend√™ncias: {str(e)}"
                )
                sys.exit(1)
        else:
            sys.exit(1)
    
    root = ctk.CTk()
    app = AutomacaoApp(root)
    root.mainloop()